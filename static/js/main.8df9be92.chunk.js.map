{"version":3,"sources":["../../src/styles.ts","../../src/types.ts","../../src/components/RecurrenceContext.ts","../../src/components/RecurrenceProvider.tsx","../../src/components/general/DatePicker/DatePicker.tsx","../../src/components/general/DatePicker/styles.ts","../../src/components/StartDateSelector/StartDateSelector.tsx","../../src/components/StartDateSelector/styles.ts","../../src/components/general/DropDown/DropDown.tsx","../../src/components/general/DropDown/styles.ts","../../src/components/general/NumberInput/NumberInput.tsx","../../src/components/general/NumberInput/styles.ts","../../src/components/WeekDaysSelector/WeekDaysSelector.tsx","../../src/components/WeekDaysSelector/styles.ts","../../src/components/FrequencySelector/FrequencySelector.tsx","../../src/components/FrequencySelector/styles.ts","../../src/components/EndingConditionSelector/EndingConditionSelector.tsx","../../src/components/EndingConditionSelector/styles.ts","../../src/components/TimeSelector/TimeSelector.tsx","../../src/components/TimeSelector/styles.ts","../../src/Recurrence.tsx","App.tsx","styles.ts","index.tsx"],"names":["EndingConditionType","FrequencyType","today","contextInitValue","recurrence","startDate","endDate","isAllDay","frequency","numberOfRepetitions","weekDaysRepetition","endingCondition","endingOccurrencesNumber","startTime","endTime","onFieldChange","onFieldsChange","RecurrenceContext","React","RecurrenceProvider","children","value","withStyles","createStyles","name","label","onChange","disabled","disablePast","variant","margin","props","disableToolbar","format","useContext","date","options","others","select","key","option","adornmentLabel","min","max","type","event","parseInt","isNaN","endAdornment","position","inputProps","labelWidth","DEFAULT_WEEK_DAYS","title","symbol","theme","daysContainer","display","dayButton","width","height","fontSize","textTransform","minWidth","borderRadius","marginRight","backgroundColor","dayButtonLabel","fontWeight","selected","color","white","classes","onDayClicked","className","day","arrow","classNames","onClick","newDaysList","d","handleDayClicked","FREQUENCY_OPTIONS","marginBottom","dropdown","numberOfRepetitionsInput","weekDaysSelector","useEffect","toClear","undefined","item","xs","frequencyLabel","getFrequencyLabel","getRepetitionsLabelByFrequency","in","Weekly","sm","days","occurrencesNumber","radioGroup","radio","component","container","spacing","direction","justify","alignItems","None","control","EndDate","minDate","minDateMessage","OccurrencesNumber","id","checked","labelPlacement","KeyboardButtonProps","Object","root","padding","textAlign","defaultChildren","newRecurrence","object","StartDateSelector","FrequencySelector","EndingConditionSelector","TimeSelector","border","Date","defaultRecurrence","useState","setRecurrence","utils","DateFnsUtils","updatedRecurrence","Grid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8df9be92.chunk.js","sourcesContent":["import { createStyles, Theme } from '@material-ui/core'\n\nexport default (theme: Theme) => {\n  return createStyles({\n    root: {\n      margin: theme.spacing(2),\n      padding: 0.5,\n      fontSize: 2,\n      textAlign: 'center'\n    }\n  })\n}\n","export enum EndingConditionType {\n  None = 'none',\n  EndDate = 'end_date',\n  OccurrencesNumber = 'occurrences_number'\n}\n\nexport enum FrequencyType {\n  None = 'none',\n  Hourly = 'hourly',\n  Daily = 'daily',\n  Weekly = 'weekly',\n  Monthly = 'monthly',\n  Annually = 'annually'\n}\n\nexport interface RecurrenceType {\n  startDate: Date\n  frequency: FrequencyType\n  numberOfRepetitions?: number\n  weekDaysRepetition: Array<number>\n  endingCondition: EndingConditionType\n  endingOccurrencesNumber?: number\n  endDate?: Date\n  isAllDay: boolean\n  startTime?: Date\n  endTime?: Date\n}\n\nexport interface RecurrenceDay {\n  key: number\n  title: string\n  symbol: string\n}\n\nexport interface Option {\n  key: string\n  title: string\n}\n","import React from 'react'\nimport { EndingConditionType, FrequencyType, RecurrenceType } from '../types'\n\ninterface RecurrenceContextType {\n  recurrence: RecurrenceType\n  onFieldChange: (key: string, value: any) => void\n  onFieldsChange: (object: any) => void\n}\nconst today = new Date()\nconst contextInitValue: RecurrenceContextType = {\n  recurrence: {\n    startDate: today,\n    endDate: today,\n    isAllDay: false,\n    frequency: FrequencyType.Weekly,\n    numberOfRepetitions: 1,\n    weekDaysRepetition: [],\n    endingCondition: EndingConditionType.None,\n    endingOccurrencesNumber: 1,\n    startTime: today,\n    endTime: today\n  },\n  onFieldChange: () => {},\n  onFieldsChange: () => {}\n}\n\nconst RecurrenceContext = React.createContext<RecurrenceContextType>(\n  contextInitValue\n)\n\nexport default RecurrenceContext\n","import React, { FC } from 'react'\nimport { RecurrenceType } from '../types'\nimport RecurrenceContext from './RecurrenceContext'\n\nexport interface RecurrenceProviderProps {\n  recurrence: RecurrenceType\n  onFieldChange: (key: string, value: any) => void\n  onFieldsChange: (object: any) => void\n}\n\nconst RecurrenceProvider: FC<RecurrenceProviderProps> = ({\n  recurrence,\n  onFieldChange = () => {},\n  onFieldsChange = () => {},\n  children\n}) => {\n  return (\n    <RecurrenceContext.Provider\n      value={{ recurrence, onFieldChange, onFieldsChange }}\n    >\n      {children}\n    </RecurrenceContext.Provider>\n  )\n}\n\nexport default RecurrenceProvider\n","import {\n  KeyboardDatePicker,\n  KeyboardDatePickerProps\n} from '@material-ui/pickers'\nimport * as React from 'react'\nimport { withStyles } from '@material-ui/core'\nimport styles from './styles'\n\nconst DEFAULT_DATE_FORMAT = 'MM/dd/yyyy'\n\nconst DatePicker = ({\n  name,\n  label,\n  value,\n  onChange = () => {},\n  disabled = false,\n  disablePast = true,\n  variant = 'inline',\n  margin = 'normal',\n  ...props\n}: KeyboardDatePickerProps) => {\n  return (\n    <KeyboardDatePicker\n      name={name}\n      label={label}\n      value={value}\n      onChange={onChange}\n      disableToolbar\n      variant={variant}\n      format={DEFAULT_DATE_FORMAT}\n      margin={margin}\n      disablePast={disablePast}\n      disabled={disabled}\n      {...props}\n    />\n  )\n}\nexport default withStyles(styles)(DatePicker)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({})\n}\n","import * as React from 'react'\nimport { WithStyles, withStyles } from '@material-ui/core'\nimport DatePicker from '../general/DatePicker'\nimport styles from './styles'\nimport RecurrenceContext from '../RecurrenceContext'\nimport { FunctionComponent, useContext } from 'react'\n\nconst StartDateSelector: FunctionComponent<WithStyles<typeof styles>> = () => {\n  const { recurrence, onFieldChange } = useContext(RecurrenceContext)\n\n  const handleStartDateChange = (date: Date) => {\n    onFieldChange('startDate', date)\n  }\n\n  return (\n    <DatePicker\n      name='start-date'\n      label='Start'\n      value={recurrence.startDate}\n      onChange={handleStartDateChange}\n      data-testid='recurrence-start-date'\n    />\n  )\n}\nexport default withStyles(styles)(StartDateSelector)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({})\n}\n","import * as React from 'react'\nimport { MenuItem, TextFieldProps, withStyles } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField/TextField'\nimport { Option } from '../../../types'\nimport styles from './styles'\n\ntype DropDownProps = TextFieldProps & { options: Array<Option> }\n\nconst DropDown = ({\n  name,\n  label,\n  value,\n  onChange = () => {},\n  options = [],\n  ...others\n}: DropDownProps) => {\n  return (\n    <TextField\n      name={name}\n      select\n      value={value}\n      onChange={onChange}\n      label={label}\n      {...others}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.key} value={option.key}>\n          {option.title}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\nexport default withStyles(styles)(DropDown)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({})\n}\n","import * as React from 'react'\nimport OutlinedInput from '@material-ui/core/OutlinedInput/OutlinedInput'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport FormControl from '@material-ui/core/FormControl'\nimport { InputBaseProps, withStyles } from '@material-ui/core'\nimport styles from './styles'\n\ntype NumberInputProps = Omit<InputBaseProps, 'onChange'> & {\n  name: string\n  label?: string\n  value?: number\n  onChange: (value: number) => void\n  adornmentLabel?: string\n  min?: number\n  max?: number\n}\n\nconst NumberInput = ({\n  name,\n  label = '',\n  value = 0,\n  onChange = () => {},\n  disabled = false,\n  adornmentLabel = '',\n  min = 1,\n  max = 1000,\n  ...others\n}: NumberInputProps) => {\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(event.target.value)\n    if (isNaN(value)) return\n    onChange(value)\n  }\n  return (\n    <FormControl variant='outlined'>\n      <OutlinedInput\n        name={name}\n        label={label}\n        type='number'\n        value={value}\n        onChange={handleOnChange}\n        disabled={disabled}\n        endAdornment={\n          <InputAdornment position='end'>{adornmentLabel}</InputAdornment>\n        }\n        aria-describedby='outlined-weight-helper-text'\n        inputProps={{\n          'aria-label': 'weight',\n          min: min,\n          max: max,\n          'decimal-separator': 'false'\n        }}\n        labelWidth={0}\n        {...others}\n      />\n    </FormControl>\n  )\n}\nexport default withStyles(styles)(NumberInput)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({})\n}\n","import { RecurrenceDay } from '../../types'\nimport Tooltip from '@material-ui/core/Tooltip/Tooltip'\nimport Button from '@material-ui/core/Button'\nimport * as React from 'react'\nimport { withStyles, WithStyles } from '@material-ui/core'\nimport styles from './styles'\nimport classNames from 'classnames'\n\nexport interface WeekDaysSelectorProps {\n  weekDaysRepetition: Array<number>\n  onDayClicked: (days: Array<number>) => void\n}\n\nconst DEFAULT_WEEK_DAYS: RecurrenceDay[] = [\n  {\n    key: 0,\n    title: 'Sunday',\n    symbol: 'S'\n  },\n  {\n    key: 1,\n    title: 'Monday',\n    symbol: 'M'\n  },\n  {\n    key: 2,\n    title: 'Tuesday',\n    symbol: 'T'\n  },\n  {\n    key: 3,\n    title: 'Wednesday',\n    symbol: 'W'\n  },\n  {\n    key: 4,\n    title: 'Thursday',\n    symbol: 'T'\n  },\n  {\n    key: 5,\n    title: 'Friday',\n    symbol: 'F'\n  },\n  {\n    key: 6,\n    title: 'Saturday',\n    symbol: 'S'\n  }\n]\n\nconst WeekDaysSelector = ({\n  classes,\n  weekDaysRepetition = [],\n  onDayClicked\n}: WeekDaysSelectorProps & WithStyles<typeof styles>) => {\n  const handleDayClicked = (day: RecurrenceDay) => {\n    let newDaysList: Array<number> = weekDaysRepetition\n    if (newDaysList.includes(day.key)) {\n      newDaysList = newDaysList.filter((d) => d !== day.key)\n    } else {\n      newDaysList.push(day.key)\n    }\n    onDayClicked(newDaysList)\n  }\n  return (\n    <div\n      className={classes.daysContainer}\n      data-testid='recurrence-week-days-selector'\n    >\n      {DEFAULT_WEEK_DAYS.map((day) => (\n        <Tooltip\n          key={`${day.title}-${day.key}-tooltip`}\n          title={day.title}\n          arrow\n        >\n          <Button\n            className={classNames(classes.dayButton, {\n              [classes.selected]: weekDaysRepetition.includes(day.key)\n            })}\n            key={`${day.key}-btn`}\n            onClick={() => handleDayClicked(day)}\n            classes={{ label: classes.dayButtonLabel }}\n            data-testid={`weekdays-${day.key}`}\n          >\n            {day.symbol}\n          </Button>\n        </Tooltip>\n      ))}\n    </div>\n  )\n}\n\nexport default withStyles(styles)(WeekDaysSelector)\n","import { createStyles, Theme } from '@material-ui/core'\n\nexport default (theme: Theme) => {\n  return createStyles({\n    daysContainer: {\n      display: 'inline-flex',\n      margin: theme.spacing(2)\n    },\n    dayButton: {\n      width: 24,\n      height: 24,\n      fontSize: theme.typography.pxToRem(10),\n      textTransform: 'capitalize',\n      minWidth: 24,\n      borderRadius: '50%',\n      marginRight: theme.spacing(1.5),\n      backgroundColor: '#e8e8e8'\n    },\n    dayButtonLabel: {\n      fontSize: theme.typography.pxToRem(14),\n      fontWeight: 'normal'\n    },\n    selected: {\n      '&.Mui-disabled': {\n        color: theme.palette.common.white\n      },\n      backgroundColor: theme.palette.primary.light,\n      color: theme.palette.common.white,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.light,\n        color: theme.palette.common.white\n      }\n    }\n  })\n}\n","import * as React from 'react'\nimport { FrequencyType, Option } from '../../types'\nimport Grid from '@material-ui/core/Grid'\nimport Fade from '@material-ui/core/Fade'\nimport DropDown from '../general/DropDown'\nimport NumberInput from '../general/NumberInput'\nimport WeekDaysSelector from '../WeekDaysSelector'\nimport { WithStyles, withStyles } from '@material-ui/core'\nimport styles from './styles'\nimport { FunctionComponent, useContext, useEffect } from 'react'\nimport RecurrenceContext from '../RecurrenceContext'\n\nconst FREQUENCY_OPTIONS: Option[] = [\n  {\n    key: FrequencyType.None,\n    title: 'Does not repeat'\n  },\n  {\n    key: FrequencyType.Hourly,\n    title: 'Hourly'\n  },\n  {\n    key: FrequencyType.Daily,\n    title: 'Daily'\n  },\n  {\n    key: FrequencyType.Weekly,\n    title: 'Weekly'\n  },\n  {\n    key: FrequencyType.Monthly,\n    title: 'Monthly'\n  },\n  {\n    key: FrequencyType.Annually,\n    title: 'Annually'\n  }\n]\nconst FrequencySelector: FunctionComponent<WithStyles<typeof styles>> = ({\n  classes\n}) => {\n  const { recurrence, onFieldChange, onFieldsChange } = useContext(\n    RecurrenceContext\n  )\n\n  const handleFrequencyChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    onFieldChange('frequency', event.target.value)\n  }\n  const handleNumberOfRepetitionChange = (numberOfRepetitions: number) => {\n    onFieldChange('numberOfRepetitions', numberOfRepetitions)\n  }\n  const handleWeekDaysChange = (days: Array<number>) => {\n    onFieldChange('weekDaysRepetition', days)\n  }\n\n  const getFrequencyLabel = () => {\n    switch (recurrence.frequency) {\n      case FrequencyType.Hourly:\n        return 'hour'\n      case FrequencyType.Daily:\n        return 'day'\n      case FrequencyType.Weekly:\n        return 'week'\n      case FrequencyType.Monthly:\n        return 'month'\n      case FrequencyType.Annually:\n        return 'year'\n      default:\n        return ''\n    }\n  }\n\n  const getRepetitionsLabelByFrequency = () => {\n    const frequencyLabel = getFrequencyLabel()\n    if (frequencyLabel === '') {\n      return ''\n    }\n    return `${frequencyLabel}(s)`\n  }\n\n  useEffect(() => {\n    let toClear = {}\n    if (recurrence.frequency !== FrequencyType.Weekly) {\n      toClear = {\n        weekDaysRepetition: []\n      }\n    }\n    if (recurrence.frequency === FrequencyType.None) {\n      toClear = {\n        ...toClear,\n        numberOfRepetitions: undefined\n      }\n      onFieldsChange(toClear)\n    }\n  }, [recurrence.frequency])\n\n  return (\n    <div>\n      <Grid item xs={12} className={classes.frequency}>\n        <DropDown\n          name='frequency'\n          value={recurrence.frequency}\n          onChange={handleFrequencyChange}\n          label='Frequency'\n          options={FREQUENCY_OPTIONS}\n          className={classes.dropdown}\n          data-testid='recurrence-frequency'\n        />\n      </Grid>\n      {recurrence.frequency !== FrequencyType.None && (\n        <Grid item xs={12}>\n          <NumberInput\n            name='number-of-repetition'\n            value={recurrence.numberOfRepetitions}\n            onChange={handleNumberOfRepetitionChange}\n            adornmentLabel={getRepetitionsLabelByFrequency()}\n            className={classes.numberOfRepetitionsInput}\n            data-testid='recurrence-number-of-repetitions'\n          />\n        </Grid>\n      )}\n\n      {recurrence.frequency === FrequencyType.Weekly && (\n        <Fade in={recurrence.frequency === FrequencyType.Weekly}>\n          <Grid item sm={12}>\n            <WeekDaysSelector\n              weekDaysRepetition={recurrence.weekDaysRepetition}\n              onDayClicked={handleWeekDaysChange}\n            />\n          </Grid>\n        </Fade>\n      )}\n    </div>\n  )\n}\nexport default withStyles(styles)(FrequencySelector)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({\n    frequency: {\n      marginBottom: 10\n    },\n    dropdown: {\n      width: 100\n    },\n    numberOfRepetitionsInput: {},\n    weekDaysSelector: {}\n  })\n}\n","import * as React from 'react'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport RadioGroup from '@material-ui/core/RadioGroup/RadioGroup'\nimport { Grid, WithStyles, withStyles } from '@material-ui/core'\nimport FormControlLabel from '@material-ui/core/FormControlLabel/FormControlLabel'\nimport Radio from '@material-ui/core/Radio/Radio'\nimport FormControl from '@material-ui/core/FormControl'\nimport DatePicker from '../general/DatePicker'\nimport NumberInput from '../general/NumberInput'\nimport { EndingConditionType } from '../../types'\nimport styles from './styles'\nimport RecurrenceContext from '../RecurrenceContext'\nimport { FunctionComponent, useContext, useEffect } from 'react'\n\nconst EndingConditionSelector: FunctionComponent<WithStyles<typeof styles>> = ({\n  classes\n}) => {\n  const { recurrence, onFieldChange, onFieldsChange } = useContext(\n    RecurrenceContext\n  )\n\n  const handleEndingConditionChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    onFieldChange('endingCondition', event.target.value)\n  }\n  const handleEndingOccurrencesNumberChange = (\n    endingOccurrencesNumber: number\n  ) => {\n    onFieldChange('endingOccurrencesNumber', endingOccurrencesNumber)\n  }\n  const handleEndDateChange = (date: Date) => {\n    onFieldChange('endDate', date)\n  }\n  useEffect(() => {\n    switch (recurrence.endingCondition) {\n      case EndingConditionType.None:\n        onFieldsChange({\n          endDate: null,\n          endingOccurrencesNumber: undefined\n        })\n        break\n      case EndingConditionType.EndDate:\n        onFieldChange('endingOccurrencesNumber', undefined)\n        break\n      case EndingConditionType.OccurrencesNumber:\n        onFieldChange('endDate', null)\n        break\n    }\n  }, [recurrence.endingCondition])\n\n  return (\n    <div>\n      <FormControl component='fieldset'>\n        <FormLabel component='legend'>Ends</FormLabel>\n        <RadioGroup\n          aria-label='ends'\n          name='ends'\n          value={recurrence.endingCondition}\n          onChange={handleEndingConditionChange}\n          className={classes.radioGroup}\n        >\n          <Grid\n            container\n            spacing={1}\n            direction='column'\n            justify='space-between'\n            alignItems='flex-start'\n          >\n            <Grid item sm={6}>\n              <FormControlLabel\n                value={EndingConditionType.None}\n                control={\n                  <Radio\n                    color='primary'\n                    className={classes.radio}\n                    data-testid='recurrence-ending-condition-none-choice'\n                  />\n                }\n                label='Never'\n              />\n            </Grid>\n          </Grid>\n          <Grid container spacing={1}>\n            <Grid\n              item\n              sm={6}\n              justify='flex-start'\n              container\n              alignItems='flex-start'\n            >\n              <FormControlLabel\n                value={EndingConditionType.EndDate}\n                control={\n                  <Radio\n                    color='primary'\n                    className={classes.radio}\n                    data-testid='recurrence-ending-condition-end-date-choice'\n                  />\n                }\n                label='On'\n              />\n            </Grid>\n            <Grid item sm={6}>\n              <DatePicker\n                name='end-date'\n                label='End'\n                value={recurrence.endDate}\n                onChange={handleEndDateChange}\n                disabled={\n                  recurrence.endingCondition !== EndingConditionType.EndDate\n                }\n                minDate={recurrence.startDate}\n                minDateMessage='End Date must be equal or after Start Date'\n                className={classes.endDate}\n                inputProps={{\n                  'data-testid': 'recurrence-ending-condition-end-date'\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Grid container spacing={1}>\n            <Grid item sm={6} container alignItems='flex-start'>\n              <FormControlLabel\n                value={EndingConditionType.OccurrencesNumber}\n                control={\n                  <Radio\n                    color='primary'\n                    className={classes.radio}\n                    data-testid='recurrence-ending-condition-occurrences-number-choice'\n                  />\n                }\n                label='After'\n              />\n            </Grid>\n            <Grid item sm={6}>\n              <NumberInput\n                name='ending-occurrences-number'\n                value={recurrence.endingOccurrencesNumber}\n                onChange={handleEndingOccurrencesNumberChange}\n                adornmentLabel='occurrences'\n                disabled={\n                  recurrence.endingCondition !==\n                  EndingConditionType.OccurrencesNumber\n                }\n                inputProps={{\n                  'data-testid':\n                    'recurrence-ending-condition-occurrences-number'\n                }}\n                className={classes.occurrencesNumber}\n              />\n            </Grid>\n          </Grid>\n        </RadioGroup>\n      </FormControl>\n    </div>\n  )\n}\nexport default withStyles(styles)(EndingConditionSelector)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({\n    occurrencesNumber: {\n      '& p': {\n        fontSize: '0.8rem'\n      }\n    },\n    radioGroup: {},\n    radio: {},\n    endDate: {}\n  })\n}\n","import * as React from 'react'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport { KeyboardTimePicker } from '@material-ui/pickers'\nimport { Grid, withStyles } from '@material-ui/core'\nimport styles from './styles'\nimport RecurrenceContext from '../RecurrenceContext'\nimport { useContext, useEffect } from 'react'\n\nconst TimeSelector = () => {\n  const { recurrence, onFieldChange, onFieldsChange } = useContext(\n    RecurrenceContext\n  )\n\n  const handleAllDayChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onFieldChange('isAllDay', event.target.checked)\n  }\n  const handleStartTimeChange = (startTime?: Date) => {\n    onFieldChange('startTime', startTime)\n  }\n  const handleEndTimeChange = (endTime?: Date) => {\n    onFieldChange('endTime', endTime)\n  }\n  useEffect(() => {\n    if (recurrence.isAllDay) {\n      onFieldsChange({\n        startTime: null,\n        endTime: null\n      })\n    }\n  }, [recurrence.isAllDay])\n\n  return (\n    <div>\n      <Grid container spacing={1}>\n        <Grid item sm={2} justify='flex-end' container alignItems='flex-end'>\n          <FormControlLabel\n            control={\n              <Checkbox\n                id='is-all-day'\n                name='is-all-day'\n                checked={recurrence.isAllDay}\n                onChange={handleAllDayChange}\n                color='primary'\n                data-testid='recurrence-all-day'\n              />\n            }\n            label='All day'\n            labelPlacement='top'\n          />\n        </Grid>\n        <Grid\n          item\n          sm={5}\n          justify='flex-start'\n          container\n          alignItems='flex-start'\n        >\n          <KeyboardTimePicker\n            margin='normal'\n            id='start-time'\n            label='Start'\n            value={recurrence.startTime}\n            onChange={handleStartTimeChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change time'\n            }}\n            disabled={recurrence.isAllDay}\n            inputProps={{\n              'data-testid': 'recurrence-start-time'\n            }}\n          />\n        </Grid>\n        <Grid\n          item\n          sm={5}\n          justify='flex-start'\n          container\n          alignItems='flex-start'\n        >\n          <KeyboardTimePicker\n            margin='normal'\n            id='end-time'\n            label='End'\n            value={recurrence.endTime}\n            onChange={handleEndTimeChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change time'\n            }}\n            disabled={recurrence.isAllDay}\n            inputProps={{\n              'data-testid': 'recurrence-end-time'\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\nexport default withStyles(styles)(TimeSelector)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({})\n}\n","import * as React from 'react'\nimport styles from './styles'\nimport { Grid, WithStyles, withStyles } from '@material-ui/core'\nimport { RecurrenceType } from './types'\nimport RecurrenceProvider from './components/RecurrenceProvider'\nimport StartDateSelector from './components/StartDateSelector/StartDateSelector'\nimport FrequencySelector from './components/FrequencySelector'\nimport EndingConditionSelector from './components/EndingConditionSelector'\nimport TimeSelector from './components/TimeSelector'\n\nexport interface RecurrenceProps {\n  recurrence: RecurrenceType\n  onChange: (recurrence: RecurrenceType) => void\n  children?: React.ReactNode\n}\n\nconst Recurrence = ({\n  recurrence,\n  onChange,\n  classes,\n  children\n}: RecurrenceProps & WithStyles<typeof styles>) => {\n  const handleFieldChange = (key: string, value: any) => {\n    const newRecurrence = {\n      ...recurrence,\n      [key]: value\n    }\n    onChange(newRecurrence)\n  }\n\n  const handleFieldsChange = (object: any) => {\n    const newRecurrence = {\n      ...recurrence,\n      ...object\n    }\n    onChange(newRecurrence)\n  }\n  const defaultChildren = (\n    <Grid\n      container\n      direction='column'\n      justify='center'\n      alignItems='center'\n      spacing={3}\n    >\n      <Grid item xs={12}>\n        <StartDateSelector />\n      </Grid>\n      <Grid item xs={12}>\n        <FrequencySelector />\n      </Grid>\n      <Grid item sm={12}>\n        <EndingConditionSelector />\n      </Grid>\n      <Grid item sm={12}>\n        <TimeSelector />\n      </Grid>\n    </Grid>\n  )\n\n  return (\n    <RecurrenceProvider\n      recurrence={recurrence}\n      onFieldChange={handleFieldChange}\n      onFieldsChange={handleFieldsChange}\n    >\n      <div className={classes.root}>\n        {children !== undefined ? children : defaultChildren}\n      </div>\n    </RecurrenceProvider>\n  )\n}\nexport default Object.assign(withStyles(styles)(Recurrence), {\n  StartDateSelector: StartDateSelector,\n  FrequencySelector: FrequencySelector,\n  EndingConditionSelector: EndingConditionSelector,\n  TimeSelector: TimeSelector\n})\n","import React, { useState } from 'react'\nimport { Recurrence, RecurrenceType, FrequencyType, EndingConditionType } from 'react-recurrence'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { Grid, withStyles, WithStyles } from '@material-ui/core'\nimport styles from './styles'\n\nconst App = ({ classes }: WithStyles<typeof styles>) => {\n  const defaultEndingOccurrencesNumber = 13\n\n  const today = new Date()\n  const defaultRecurrence = {\n    startDate: today,\n    endDate: today,\n    frequency: FrequencyType.Weekly,\n    numberOfRepetitions: 1,\n    weekDaysRepetition: [],\n    endingCondition: EndingConditionType.None,\n    endingOccurrencesNumber: defaultEndingOccurrencesNumber,\n    isAllDay: false,\n    startTime: today,\n    endTime: today\n  }\n  const [recurrence, setRecurrence] = useState<RecurrenceType>(\n    defaultRecurrence\n  )\n\n  const handleRecurrenceChange = (updatedRecurrence: RecurrenceType) => {\n    setRecurrence(updatedRecurrence)\n  }\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Recurrence\n        recurrence={recurrence}\n        onChange={handleRecurrenceChange}\n        classes={classes}\n      >\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n          spacing={3}\n        >\n          <Grid item xs={12}>\n            <Recurrence.StartDateSelector/>\n          </Grid>\n          <Grid item xs={12}>\n            <Recurrence.FrequencySelector/>\n          </Grid>\n          <Grid item sm={12}>\n            <Recurrence.EndingConditionSelector/>\n          </Grid>\n          <Grid item sm={12}>\n            <Recurrence.TimeSelector/>\n          </Grid>\n        </Grid>\n      </Recurrence>\n    </MuiPickersUtilsProvider>\n  )\n}\n\nexport default withStyles(styles)(App)\n","import { createStyles } from '@material-ui/core'\n\nexport default () => {\n  return createStyles({\n    root: {\n      border: '2px solid #000'\n    }\n  })\n}\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}